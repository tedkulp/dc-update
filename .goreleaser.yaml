# GoReleaser configuration for dc-update
# See https://goreleaser.com for documentation

version: 1
project_name: dc-update

before:
  hooks:
    - go mod tidy

builds:
  - id: dc-update
    main: ./cmd/dc-update
    binary: dc-update
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: windows
        goarch: arm64
    ldflags:
      - -s -w
      - -X main.version={{ .Version }}
      - -X main.commit={{ .Commit }}
      - -X main.date={{ .Date }}

archives:
  - id: default
    format: tar.gz
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    format_overrides:
      - goos: windows
        format: zip
  - id: binaries
    builds:
      - dc-update
    format: binary
    name_template: "{{ .ProjectName }}-{{ .Os }}-{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"

# Configure individual binary uploads for direct downloads
release:
  github:
    owner: "{{ .Env.GITHUB_OWNER }}"
    name: "{{ .ProjectName }}"
  name_template: "v{{ .Version }}"
  
# Generate additional releases for standalone binaries
# upx:
#   - enabled: false

# Docker images
dockers:
  - image_templates:
      - "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:{{ .Version }}-amd64"
    dockerfile: Dockerfile
    use: buildx
    extra_files:
      - cmd/
      - internal/
      - go.sum
      - go.mod
    build_flag_templates:
      - "--platform=linux/amd64"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.source=https://github.com/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}"
  - image_templates:
      - "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:{{ .Version }}-arm64"
    dockerfile: Dockerfile
    use: buildx
    goarch: arm64
    extra_files:
      - cmd/
      - internal/
      - go.sum
      - go.mod
    build_flag_templates:
      - "--platform=linux/arm64"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.source=https://github.com/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}"

# docker_manifests:
  - name_template: "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:{{ .Version }}"
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:{{ .Version }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:{{ .Version }}-arm64"
  - name_template: "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:latest"
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:{{ .Version }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}:{{ .Version }}-arm64"

# Homebrew tap configuration
# brews:
#   - name: dc-update
#     ids:
#       - default
#     repository:
#       owner: "{{ .Env.GITHUB_OWNER }}"
#       name: homebrew-tap
#     url_template: "https://github.com/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
#     description: "An opinionated script for updating large docker-compose based systems"
#     homepage: "https://github.com/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}"
#     license: "MIT"
#     test: |
#       system "#{bin}/dc-update --help"

# Scoop bucket configuration for Windows
# scoops:
#   - name: dc-update
#     repository:
#       owner: "{{ .Env.GITHUB_OWNER }}"
#       name: scoop-bucket
#     url_template: "https://github.com/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
#     description: "An opinionated script for updating large docker-compose based systems"
#     homepage: "https://github.com/{{ .Env.GITHUB_OWNER }}/{{ .ProjectName }}"
#     license: "MIT"

# Generate checksums for verification
checksum:
  name_template: "checksums.txt"

# Sign releases (optional, configure GPG_FINGERPRINT env var to enable)
# signs:
#   - artifacts: checksum
#     cmd: gpg
#     args:
#       - "--batch"
#       - "--local-user"
#       - "{{ .Env.GPG_FINGERPRINT }}"
#       - "--output"
#       - "${signature}"
#       - "--detach-sign"
#       - "${artifact}"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^ci:"
      - "^build:"
      - "^chore:"
  groups:
    - title: "New Features"
      regexp: "^.*feat.*:"
      order: 0
    - title: "Bug Fixes"
      regexp: "^.*fix.*:"
      order: 1
    - title: "Documentation"
      regexp: "^.*docs.*:"
      order: 2
    - title: "Other Changes"
      order: 999
